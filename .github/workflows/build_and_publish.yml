name: "Create and publish"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  PYTHON_VERSION: "3.9.7"

jobs:
  generate-matrix:
    name: "Generate matrix"
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set-matrix.outputs.packages }}

    steps:
      - name: Get source code
        uses: actions/checkout@v2

      # About $GITHUB_SHA https://github.community/t/github-sha-not-the-same-as-the-triggering-commit/18286/2
      # Don't know if I should use "origin/$GITHUB_BASE_REF" or ${{ github.event.pull_request.base.sha }}, same?
      - name: Check changed packages and generate matrix
        id: set-matrix
        run: |
          if [ $GITHUB_BASE_REF ]; then
            echo Pull
            export PREVIOUS_SHA="${{ github.event.pull_request.base.sha }}"
          else
            echo Push
            export PREVIOUS_SHA="${{ github.event.before }}"
          fi
          export CURRENT_SHA="$GITHUB_SHA"

          echo PREVIOUS_SHA: $PREVIOUS_SHA
          echo CURRENT_SHA: $CURRENT_SHA

          git fetch origin $PREVIOUS_SHA --depth=1

          JSON_PACKAGES=$( python generate_matrix.py )
          echo $JSON_PACKAGES
          echo "::set-output name=packages::$( echo $JSON_PACKAGES )"

  create-package:
    needs: generate-matrix

    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022]
        compiler: [msvc]
        package: ${{ fromJson(needs.generate-matrix.outputs.packages) }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Get source code
        uses: actions/checkout@v2

      - name: Setup VisualStudio Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: 'x64'

      - name: Install conan
        run: |
          pip install wheel setuptools
          pip install conan

      - name: Setup conan
        shell: bash
        run: |
          export CONAN_USER_HOME=$( PWD )
          conan remote add gitlab https://gitlab.com/api/v4/projects/28364651/packages/conan
          conan config set general.revisions_enabled=1
          conan user "${{ secrets.GITLAB_USERNAME }}" -r gitlab -p "${{ secrets.GITLAB_ACCESS_TOKEN }}"

      - name: Create ${{ matrix.package }} package
        shell: bash
        run: |
          export CONAN_USER_HOME=$( PWD )
          export PACKAGE_NAME=${{ matrix.package }}
          PACKAGE_VERSION=$( python get_current_version.py )
          # PROFILE_PATH=$( ".conan/profiles/${{ matrix.os }}_${{ matrix.compiler }}" )

          # echo $PROFILE_PATH

          conan create ./packages/$PACKAGE_NAME $PACKAGE_VERSION -pr=".conan/profiles/${{ matrix.os }}_${{ matrix.compiler }}" -s compiler.runtime_type=Debug
          conan create ./packages/$PACKAGE_NAME $PACKAGE_VERSION -pr=".conan/profiles/${{ matrix.os }}_${{ matrix.compiler }}" -s compiler.runtime_type=Release

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo DRY UPLOAD
            conan upload $PACKAGE_VERSION --all --check --remote gitlab --skip-upload
          else
            echo ACTUAL UPLOAD
            conan upload $PACKAGE_VERSION --all --check --remote gitlab
          fi
